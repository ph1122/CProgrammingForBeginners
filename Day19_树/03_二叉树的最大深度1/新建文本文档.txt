/*
https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/

给定一个二叉树 root ，返回其最大深度。

二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。



示例 1：





输入：root = [3,9,20,null,null,15,7]
输出：3
示例 2：

输入：root = [1,null,2]
输出：2


提示：

树中节点的数量在 [0, 104] 区间内。
-100 <= Node.val <= 100
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int maxDepth(struct TreeNode* root) {
    if (root == NULL) {
        return 0;
    }

    int ld = maxDepth(root->left);
    int rd = maxDepth(root->right);
    return (ld > rd ? ld : rd) + 1;

}

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int maxDep;
void dfs(struct TreeNode* node, int dep) {
    if (maxDep < dep) {
        maxDep = dep;
    }
    if (node) {
        dfs(node->left, dep + 1);
        dfs(node->right, dep + 1);
    }
}
int calculateDepth(struct TreeNode* root) {
    maxDep = 0;
    dfs(root, 0);
    return maxDep;
}